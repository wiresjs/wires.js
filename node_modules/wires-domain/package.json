{
  "name": "wires-domain",
  "version": "1.2.8",
  "description": "Restfull service with dependency injection",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "restful",
    "domain",
    "mongodb",
    "mysql"
  ],
  "author": {
    "name": "ivan.orlov"
  },
  "license": "MIT",
  "dependencies": {
    "app-root-path": "^1.0.0",
    "async": "^0.9.0",
    "lodash": "^2.4.1",
    "log4js": "^0.6.21",
    "path-to-regexp": "^1.0.0",
    "promise": "^7.0.0",
    "wires-class": "^1.0.0"
  },
  "devDependencies": {
    "body-parser": "^1.6.0",
    "cookie-parser": "*",
    "express": "^4.8.0",
    "should": "^4.0.4"
  },
  "readme": "wires-domain\n============\n\n# An ambitious dependency injection for your project\n\n\n## Installation\n\n\tnpm install wires-domain --save\n\n## Services\n\nDefine few services\n\n\tdomain.service(\"$a\", function() {\n\t\treturn \"Response from $a\"\n\t});\n\tdomain.service(\"$b\", function($a) {\n\t\treturn $a\n\t});\n\nNow we can call service \"$b\", that returns results from service \"$a\"\n\n\tdomain.require(function($b) {\n\t\t//$b is resolved and ready to be used!\n\t})\n\ndomain.require always returns a promise.\n\nFor more example see test/flow.js\n\n### Asynchronous\n\n\tdomain.service(\"$wait\", function() {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tresolve(\"Some async result\")\n\t\t})\n\t});\n\n\n## Factories\n\nWires supports automatic factory creation.\nSimply do that:\n\n    domain.service(\"item\", function() {\n\t\treturn domain.Factory.extend({\n\t\t    init : function($a)\n\t\t    {\n\t\t    \tthis.localVariable = $a;\n\t\t    },\n\t\t    testMe : function()\n\t\t    {\n\t\t    \treturn this.localVariable;\n\t\t    }\n\t\t});\n\t});\n\nAccesing this service will constuct the model call init and resolve all injected dependencies\n\n\tindex: function($res, item) {\n\t\t$res.send(item.testMe())\n\t}\n\nYou can create an abstraction layer on top on domain.Factory\nExtend as much as you like, building your own solutions!\n\n\n## Restful Architecture\n\n2 folders to be created. Services and RestApi. Put all your dependencies into \"services\" folder.\nResembles angular.js style.\n\nRequire all at once:\n\n\trequire('require-all')('/services');\n\trequire('require-all')('/rest');\n\nConnect with express.js\n\n\tapp.use(domain.express());\n\n\n## Restfull example\n\n\tvar domain = require('wires-domain');\n\tdomain.path(\"/:id?\", {{\n\t\tget: function($res, $params) {\n\t\t\t$res.send({ id : $params.id } )\n\t\t}\n\t});\n\nAll matched paramaters are combined into \"$params\" injection\n\n### Restful methods\n\n\t// GET\n    get: function($res) {\n\t\tthrow {\n\t\t\tstatus: 505,\n\t\t\tmessage: 'Not implemented'\n\t\t};\n\t},\n\t// POST\n\tpost: function($res) {\n\t\tthrow {\n\t\t\tstatus: 505,\n\t\t\tmessage: 'Not implemented'\n\t\t}\n\t},\n\t// PUT\n\tput: function($res) {\n\t\tthrow {\n\t\t\tstatus: 505,\n\t\t\tmessage: 'Not implemented'\n\t\t}\n\t},\n\t// DELETE\n\tdelete: function() {\n\t\tthrow {\n\t\t\tstatus: 505,\n\t\t\tmessage: 'Not implemented'\n\t\t}\n\t}\n\n\n## Restful local injections\n\n### $res\nExpress res\n\n### $req\nExpress req\n\n### $params\nmatched parameters from the url\n\n### $next\nIt is possible to try next candidate. Note, that this is not express \"next\" function.\nLet's check an example:\n\n\tdomain.path(\"/\", {\n\t\tget: function($res, $nice, $next) {\n\t\t\t$next();\n\t\t\t//$res.send(\"First\")\n\t\t}\n\t});\n\n\tdomain.path(\"/\",{\n\t\tget: function($res) {\n\t\t\t$res.send(\"Second\")\n\t\t}\n\t});\n\n\n## Exceptions\n\nAny exception can be thrown. If an object is a dictionary and it contains \"status\" key, that will be taken as a http code response. You can combine it with \"message\"\n\n     domain.service(\"$a\", function($params.id) {\n\t\tif ( $params.id === 5 ){\n\t\t\tthrow {status : 400, message \"You can't access this item\"}\n\t\t}\n     });\n",
  "readmeFilename": "README.md",
  "gitHead": "93ffea17a7fab57a4689da1897c3b9685836f9ae",
  "_id": "wires-domain@1.2.8",
  "_shasum": "09b6982418597d6fa62e607c9bf124dccd0e51a2",
  "_from": "wires-domain@*"
}
